/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three'
import { useModelContext } from '../../context/ModelContext';

export default function Model(props) {

  const meshRef = useRef()
  const { nodes:tableNode } = useGLTF("./models/Table.glb");
  const tableBoundingBox = new THREE.Box3().setFromObject(tableNode.Plane002_3);
  const tableHeight = tableBoundingBox.max.y;
  const tableWidth = tableBoundingBox.max.x;
  const tableStartIndex = tableBoundingBox.min.x;

  const {currentInstrument, setCurrentInstrument} = useModelContext()
  const [positionArr, setPositionArr] = useState([0.25]);
  const [zArr, setZArr] = useState([-0.55,-0.55, -0.55, 0.03, 0.03, 0.03, 0.6, 0.6, 0.6]);
  const [xArr, setXArr] = useState([
    tableStartIndex + 1.55, tableStartIndex + 1.55+0.6, tableStartIndex + 1.55+0.6+0.6,
    tableStartIndex + 1.55, tableStartIndex + 1.55+0.6, tableStartIndex + 1.55+0.6+0.6, 
    tableStartIndex + 1.55, tableStartIndex + 1.55+0.6, tableStartIndex + 1.55+0.6+0.6]);
    
  const [visible, setVisible] = useState(false);
  const [positionSelected, setPositionSelected] = useState(null);
  const [meshes, setMeshes] = useState([]);
  

  const {hotelSelected, setHotelSelected} = useModelContext();

  
  const addMesh = (position) => {
    const newMesh = {
      position: position,
      // geometry: shape
    };
    setMeshes(prevMeshes => [...prevMeshes, newMesh]);

  };
  let totalItemsOnTop = 9;

  const setPositions = () => {
    // let totalTableLength = 4.4;
    let totalTableLength = tableWidth * 2;
    // parseInt(totalTableLength / 1.25);
    let arr = [];
    arr.push(tableStartIndex + 1.59);
    for (let i = 0; i < totalItemsOnTop; i++) {
      arr.push(arr[i - 1] + 0.6);
    }
    setPositionArr(arr);
  };

  useEffect(() => {
    setPositions();
    console.log(positionArr)
  }, []);

useEffect(()=>{
  setVisible(!visible)
  console.log(hotelSelected)
},[hotelSelected, setHotelSelected])

 const placeHotel = (index) => {
  // if(visible){
    // setVisible(false)
    addMesh(index);
    setHotelSelected(false);
  // }
}

 const HotelModel = ({positions}) => {
  return(
    <group {...props} dispose={null} position={[positions[0], positions[1], positions[2]]} scale={0.3}>
      {/* <group rotation={[-Math.PI / 2, 0, 0]} scale={1}> */}
        <mesh  
          // castShadow
          // receiveShadow
          geometry={nodes.Plane005.geometry}
          material={materials['iMeshh Metal Anisotropoc']}
        />
        <mesh
          // castShadow
          // receiveShadow
          geometry={nodes.Plane005_1.geometry}
          material={materials.RedMetal}
        />
      {/* </group> */}
    </group>
  )
 }

 const checkIfModelPresent = () => {
  for(let i=0; meshes.length; i++){
    for(let j=0; j<meshes.length; j++){
      if(meshes.length){
      console.log(meshes[i])}
    // if(i === meshes[j].position){
      // return true;
      // console.log('first')
    // }
  }
 }
 return false;
}
// const x = checkIfModelPresent();
// useEffect(() => {
//   if(meshes.length){
//   console.log(checkIfModelPresent())
// }
// },[meshes.length])

  const { nodes, materials } = useGLTF('./models/Hotels.glb')
  return (
    <>
        {hotelSelected && positionArr.map((val, index) => {
            return (
              <mesh
                visible={()=>checkIfModelPresent()}
                key={index}
                ref={meshRef}
                onClick={() => placeHotel(index)}
                position={[xArr[index], tableHeight/2.5, zArr[index]]}
              >
                <boxGeometry args={[0.5, 0.001, 0.5]} />
                <meshStandardMaterial color={0x2c9e93} transparent={true} opacity={0.4}/>
              </mesh>
            );
          })}
          {meshes.map((mesh, index) => {
          return (
            <mesh key={index}>
              <HotelModel positions={[xArr[mesh.position], 0.47, zArr[mesh.position]]}/>
            </mesh>
          )
          })}
    </>
  )
}

useGLTF.preload('./models/Hotels.glb')
